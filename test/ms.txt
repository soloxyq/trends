#pragma pack(4)
usb-wifi 芯片常用规格参数
RTL8191
80211 b/g/n(mimo ofdm调制)
20MHZ 72/144Mbps
40MHZ 150/300Mbps

/*******************************************************************************
 *char data[0]实现可变长字符串
 #pragma pack
 ******************************************************************************/
 不占用空间,仅表示内存地址符号.
	struct MyData 
	{
	    int nLen;			//首地址
	    char data[0];
	};  
	struct MyData *p = (struct MyData *)malloc(sizeof(struct MyData )+strlen(str))

/*******************************************************************************
 *一行shell命令
 ******************************************************************************/
* 找出deb包含文件并重新压缩
	* dpkg -L linux-headers-3.16.0-38 > headers
	* headers删除无关顶层目录
	* tar zcvf headers-gen.tar.gz `cat headers-gen` | tee log_headers-gen 
* 

/*******************************************************************************
 *基本gdbserver使用命令
 ******************************************************************************/
* gdbserver 192.168.16.1:5678 ./test
* arm-linux-gdb 
* target remote 192.168.2.1:5678

/*******************************************************************************
 *中断服务程序(Interrupt Service Routines)注意事项
 ******************************************************************************/
中断是嵌入式系统中重要的组成部分，但是在标准C中不包含中断。许多编译开发商在标准C上增加了对中断的支持，提供新的关键字用于标示中断服务程序(ISR)，类似于__interrupt、#programinterrupt等。当一个函数被定义为ISR的时候，编译器会自动为该函数增加中断服务程序所需要的中断现场入栈和出栈代码。
(1)不能返回值；
(2)不能向ISR传递参数；
(3) ISR应该尽可能的短小精悍NO浮点运算,NO可能引起阻塞的函数调用
(4) printf(char * lpFormatString,…)函数会带来重入和性能问题，不能在ISR中采用。
__interrupt ISRexample () 
{
　int intType;
　intType = GetSystemType();
　QueueAddTail(lpIntQueueHead, intType)；/* 在队列尾加入新的中断 */
}

/*******************************************************************************
 *为什么32位系统存储指针是4个字节?
 ******************************************************************************/
ABUS,DBUS CPU数据总线
操作系统
编译器

/*******************************************************************************
 *进程间IPC方式
 ******************************************************************************/
* 信号(异步通信signal)
* 管道(有名管道):半双工,数据只能单向流动
* 消息队列
* 共享存储(多用于无关进程间,与信号量配合使用)
* 信号量(有名,无名)Semaphore,用于同步
* 套接口

/*******************************************************************************
 *进程/线程间同步机制
 ******************************************************************************/
* 临界区Critical Section
* 互斥量Mutex(原子操作)
* 信号量(有名,无名)Semaphore,用于同步
* 完成量completion
* 事件Event

/*******************************************************************************
 *原子操作--一条内嵌汇编指令--Atomic--Futex--CAS
 ******************************************************************************/
 进程上下文:
 	工作队列
 原子上下文:屏蔽调度
 	tasklet 软中断(非软件层的系统调用软中断)
 不可中断上下文:屏蔽中断
 	上半部 	
* 进程调度被其他进程抢占
* 被中断和底半部打断(一般来说顶半部被设计为不可中断)
* 阻塞/非阻塞IO(poll) --> 异步
执行代码前检测.得到锁才执行,否则阻塞.
因为总有一个线程第一时间得到锁.
* 单CPU条件下, 使用锁或禁止多线程调度.(编程时注意利用原子操作尽量无锁编程)
  中断只能发生于指令之间,单条指令中完成的操作都可以认为是" 原子操作".
  而原子操作是指不会被线程调度机制打断的操作.
  asm volatile(LOCK_PREFIXE,......)
* 在x86 平台上，CPU提供了在指令执行期间对总线加锁的手段。
  CPU芯片上有一条引线#HLOCK pin，如果汇编语言的程序中在一条指令前面加上前缀"LOCK"
  经过汇编以后的机器代码就使CPU在执行这条指令的时候把#HLOCK pin的电位拉低，
  持续到这条指令结束时放开，从而把总线锁住，这样同一总线上别的CPU就暂时不能通过总线访问内存了，
  保证了这条指令在多处理器环境中的原子性.

/*******************************************************************************
 *常见加密方式(libssl)
 ******************************************************************************/
* md5:单向散列算法,MD5被广泛使用,可以用来把不同长度的数据块进行暗码运算成一个128位的数值
* sha:散列算法,可以对任意长度的数据运算生成一个160位的数值
* crc:循环冗余校验码,CRC校验由于实现简单,检错能力强
* aes:高级加密标准,是下一代的加密算法标准,速度快,安全级别高
* rsa:支持变长密钥的公共密钥算法,需要加密的文件快的长度也是可变的

/*******************************************************************************
 *嵌入式boot流程
 ******************************************************************************/
* Boot Loader
	* stage1
		* 硬件设备初始化
			* 屏蔽所有的中断
			* 设置 CPU 的速度和时钟频率
			* RAM 初始化
			* 关闭 CPU 内部指令／数据 cache
		* 为加载 Boot Loader 的 stage2 准备 RAM 空间(确认可读写)
		* 拷贝 Boot Loader 的 stage2 到 RAM 空间
		* 设置好堆栈(指针 sp)
		* 跳转到 stage2 的c入口点
	* stage2
		* 初始化本阶段要使用到的硬件设备。
		* 检测系统内存映射(memory map)
		* 将 kernel 映像和根文件系统映像从 flash 上读到 RAM 空间中
		* 为内核设置启动参数
		* 调用内核
* kernel
* APP

/*******************************************************************************
 *嵌入式常见文件系统
 ******************************************************************************/
* 基于MTD device
	* jffs:日志闪存文件系统,适用于NOR型小容量闪存,可读写,支持数据压缩,提供掉电安全保护.挂载时扫描flash建立文件结构.
	* yaffs:适用于大容量NAND型闪存,不支持数据压缩,速度更快.
	* cramfs:只读压缩文件系统,有利于保护系统文件,压缩比高.(支持最大单文件16M),实时解压到内存(可替代ramfs)
	* squashfs:只读gzip数据紧缩(支持最大单文件4G)
	* UBI-fs:适用于更大容量NAND型闪存,GB级flash表现良好.
* 基于内存的文件系统
	* ramfs/tmpfs: /tmp目录或者/var目录,经常读写的的数据可以存放在这,重启系统数据丢失	

/*******************************************************************************
 *TCP/IP四层,OSI七层,确认MTU,IP分片
 ******************************************************************************/
应用					应用/表示/会话
传输					传输
网络(arp)				网络
网络接口层				数据链路(mac,arp)/物理层

ping -l 1472 -f 192.168.8.1(default)
ping -l 1424 -f 10.198.1.1
ping -l 1424 -f baidu.com
1424 + 28 = 1452(MTU)
netsh interface ipv4 show subinterfaces
netsh interface ipv4 set subinterface "无线网络连接" mtu=1452 store=persistent
